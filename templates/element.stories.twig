/**
  *
  * THIS FILE IS AUTOGENERATED. DO NOT EDIT IT.
  *
  * @generated {{ "now"|date()|format('Y-m-d H:i:s') }}
  * @file {{ filename }}
  * @component {{ component }}
  * @description {{ properties.description }}
  * @tutorial to re-generate the file execute bin/console
  */

{% set typeToControl = {
  'string': 'text',
  'enum': 'select',
  'boolean': 'boolean',
  'color': 'color',
  'integer': 'number',
  'uri': 'url',
  'script': 'text',
  'browsing_context_name': 'text',
  'mime_type': 'text',
  'referrer_policy': 'text',
  'charset': 'text',
} %}


export default {
  title: "{{ category }}/{{ folder }}/{{ component}}",
  tags: ["autodocs"],
  parameters: {
    layout: "centered",
    componentSubtitle: "Some text here",
    docs: {
      inlineStories: true,
      source: true,
      description: {
        doc: "{{ component }}",
        component:
          "{{ properties.description|raw }}",
      },
    },
  },
  argTypes: {
    textProp: {
      type: { name: "string", required: true },
      description: "The text or HTML to display in the element",
      defaultValue: "Some text",
      control: { type: "text" },
    },
{% for attribute,props in properties.attributes %}
    {{ attribute }}Prop: {
      type: { name: "string", required: {{ props.required ? 'true' : 'false' }} },
      description: "{{ props.description }}",
      defaultValue: "{{ props.defaultValue }}",
      control: { type: "{{ typeToControl[props.type] }}" },
      {% if props.choices is defined %}options: ["{{ props.choices|join('", "') }}"],{% endif %}
    },
{% endfor %}
  },
  render: ({ textProp{% if properties.attributes is not empty %},{% endif %} {% for attribute,props in properties.attributes %}{{ attribute }}Prop, {% endfor %} }) => {
    let el = document.createElement("{{ element }}");
    if (textProp) {
      el.innerHTML = textProp;
    }
{% for attribute,props in properties.attributes %}
    if ({{ attribute }}Prop) {
      el.{{ attribute }} = {{ attribute }}Prop;
    }
{% endfor %}
    return el;
  },
};

export const Default = {
    args: {
      textProp: 'Some text',
{% for attribute,props in properties.attributes %}
        {{ attribute}}Prop: "HTML",
{% endfor %}
    },
};