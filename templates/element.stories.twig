/**
  *
  * THIS FILE IS AUTOGENERATED. DO NOT EDIT IT.
  *
  * @generated {{ "now"|date()|format('Y-m-d H:i:s') }}
  * @file {{ filename }}
  * @component {{ component }}
  * @description {{ properties.description }}
  * @tutorial to re-generate the file execute bin/console
  */
{% from '_macros.twig' import appendPropIfReserved as propName %}
{% set typeToControl = {
  'string': 'text',
  'datetime': 'date',
  'enum': 'select',
  'boolean': 'boolean',
  'color': 'color',
  'integer': 'number',
  'uri': 'text',
  'script': 'text',
  'browsing_context_name': 'text',
  'mime_type': 'text',
  'referrer_policy': 'text',
  'charset': 'text',
} %}

export default {
  title: "{{ category }}/{{ folder }}/{{ component}}",
  tags: ["autodocs"],
  parameters: {
    layout: "centered",
    componentSubtitle: "{{ properties.level|capitalize }} Element",
    docs: {
      inlineStories: true,
      source: true,
      description: {
        {# doc: "{{ component }}", #}
        component: "{{ properties.description|raw }}",
      },
      {# description: {
        component: 'Another description, overriding the comments'
      }, #}
    },
  },
  argTypes: {
    {% if properties.text is defined %}
    text: {
      type: { name: "string", required: true },
      description: "The text or HTML to display in the element",
      defaultValue: "{{ properties.text }}",
      control: { type: "text" },
    },
    {% endif %}
{% for attribute,attrProps in properties.attributes %}
    {# {% if attrProps.required == true %} #}
    {{ propName(attribute) }}: {
      type: { name: "{{ attrProps.type }}", required: {{ attrProps.required ? 'true' : 'false' }} },
      description: "{{ attrProps.description|raw  }}",
      defaultValue: "{{ attrProps.defaultValue }}",
      control: { type: "{{ typeToControl[attrProps.type] }}" },
      {% if attrProps.choices is defined %}options: ["{{ attrProps.choices|join('", "')|raw }}"],{% endif %}
    },
    {# {% endif %} #}
{% endfor %}
  },
  render: ({ {% if properties.text is defined %}text{% endif %}{% if properties.attributes is not empty and properties.text is defined %},{% endif %}{% for attribute,props in properties.attributes %}{{ propName(attribute) }},{% endfor %} }) => {
    let el = document.createElement("{{ element }}");
    {% if properties.text is defined %}
    el.innerHTML = text;
    {% endif %}
{% for attribute,props in properties.attributes %}
    if ({{ propName(attribute) }}) {
      el.{{ attribute }} = {{ propName(attribute) }};
    }
{% endfor %}
    return el;
  },
};

export const Default = {
    parameters: {
      docs: {
        description: {
          story: 'Default story with all arguments set to a random value'
        },
      },
    },
    args: {
      {% if properties.text is defined and properties.text is not empty %}
      text: "{{ properties.text }}",
      {% endif %}
{% for attribute,attrProps in properties.attributes %}
      {{ propName(attribute)}}: "{{ attrProps.defaultValue }}",
{% endfor %}
    },
};

{% for story in stories %}
export const Story{{ loop.index }} = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments'
      },
    },
  },
  args: {
    {% for name, value in story %}
    {{ name }}: "{{ value }}",
    {% endfor %}
  }
};
{% endfor %}